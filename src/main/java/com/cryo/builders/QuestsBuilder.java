package com.cryo.builders;

import ch.simschla.minify.adapter.Minifier;
import com.cryo.DBConnection;
import com.cryo.NewWorldWikiBuilder;
import com.cryo.WikiBuilder;
import com.cryo.entities.Objective;
import com.cryo.entities.Page;
import com.cryo.entities.PageTag;
import com.cryo.entities.Tag;
import com.cryo.loaders.Objectives;
import com.cryo.utils.Utils;
import de.neuland.pug4j.Pug4J;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.postgresql.util.PGobject;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Properties;

public class QuestsBuilder extends Builder {

	private static String CSS;
	private static String MINIFIED_CSS;

	@Override
	public void build() {

		DBConnection connection = NewWorldWikiBuilder.getConnection();
		try {

			for (Objective objective : Objectives.getObjectives()) {

				if(objective.getTitle().equals("")) {
//					System.out.println("No title for: "+objective.getObjectiveID());
					continue;
				}

				if(!objective.getLocalTitle().equalsIgnoreCase("The syndicate's support")) continue;

				HashMap<String, Object> model = new HashMap<>();

				model.put("quest", objective);

				String path = "objectives/" + objective.getLocalTitle().replace(" ", "_");

				ArrayList<Properties> props = new ArrayList<>();

				Properties nameProp = new Properties();
				nameProp.put("title", objective.getLocalTitle());
				nameProp.put("anchor", "#" + objective.getLocalTitle().toLowerCase().replace(" ", "-"));
				nameProp.put("children", new ArrayList<Properties>());
				props.add(nameProp);

				Properties questLineProp = new Properties();
				questLineProp.put("title", "Quest Line");
				questLineProp.put("anchor", "#quest-line");
				questLineProp.put("children", new ArrayList<Properties>());
				props.add(questLineProp);

				String html;
				try {
					html = Pug4J.render("data/templates/quests/template.pug", model);
				} catch (Exception e) {
					e.printStackTrace();
					continue;
				}

				String entriesJSON = NewWorldWikiBuilder.getGson().toJson(props);

				PGobject toc = new PGobject();
				toc.setType("json");
				toc.setValue(entriesJSON);

				PGobject json = new PGobject();
				json.setType("json");
				json.setValue("{\"js\":\"\",\"css\":\"" + MINIFIED_CSS + "\"}");

				connection.delete("pages", "path=?", path);

				Page pageDAO = new Page(-1, path, DigestUtils.sha1Hex(path), objective.getLocalTitle(), objective.getLocalDescription(), false, true, null, "", "", html, html, toc, "html", Utils.getTimestamp(), Utils.getTimestamp(), "code", "en", 5, 5, json);

				int pageId = connection.insert("pages", pageDAO);

				if (pageId == -1) return;
				PageTag questTag = new PageTag(-1, pageId, 112);
				PageTag autoGeneratedTag = new PageTag(-1, pageId, 4);

				connection.insert("pageTags", questTag);
				connection.insert("pageTags", autoGeneratedTag);

				System.out.println("Built: recipe: " + objective.getLocalTitle() + " Link: http://new-world.wiki/en/" + path);
				return;

			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	public static void loadCSSTemplate() {
		File file = new File("data/templates/quests/style.css");

		try {
			BufferedReader reader = new BufferedReader(new FileReader(file));
			StringBuilder builder = new StringBuilder();
			String line;
			while((line = reader.readLine()) != null) builder.append(line);
			reader.close();

			CSS = builder.toString();

			Minifier minifier = Minifier.CSS;
			ByteArrayOutputStream out = new ByteArrayOutputStream();

			InputStream in = new ByteArrayInputStream(CSS.getBytes());
			minifier.minify(in, out, null, null);

			in.close();
			MINIFIED_CSS = new String(out.toByteArray());

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

}
