package com.cryo.builders;

import ch.simschla.minify.adapter.Minifier;
import com.cryo.DBConnection;
import com.cryo.NewWorldWikiBuilder;
import com.cryo.WikiBuilder;
import com.cryo.entities.*;
import com.cryo.utils.Utils;
import com.google.gson.internal.LinkedTreeMap;
import de.neuland.pug4j.Pug4J;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.postgresql.util.PGobject;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

public class RecipeBuilder extends Builder {

	private static final String RECIPE_FILE = NewWorldWikiBuilder.DECOMPILED_BASE_PATH+"sharedassets/springboardentitites/datatables/javelindata_crafting.json"; //more than just the one?

	protected static HashMap<String, Recipe> recipes;

	private static String CSS;
	private static String MINIFIED_CSS;

	@Override
	public void build() {

		try {

			DBConnection connection = NewWorldWikiBuilder.getConnection();
			for(Recipe recipe : recipes.values()) {

				HashMap<String, Object> model = new HashMap<>();

				model.put("recipe", recipe);

				if(recipe.getRecipeItemDefinitions() == null || recipe.getRecipeItemDefinitions().getLocalName() == null) continue;
				if(!recipe.getRecipeItemDefinitions().getLocalName().equalsIgnoreCase("protective wyrd shoes")) continue;

				ItemDefinitions item = recipe.getRecipeItemDefinitions();

				String path = "recipes/"+item.getLocalName().replace(" ", "_");

				ArrayList<Properties> props = new ArrayList<>();

				Properties nameProp = new Properties();
				nameProp.put("title", item.getLocalName());
				nameProp.put("anchor", "#" + item.getLocalName().toLowerCase().replace(" ", "-"));
				nameProp.put("children", new ArrayList<Properties>());
				props.add(nameProp);

				String html;
				try {
					html = Pug4J.render("data/templates/recipes/template.pug", model);
				} catch(Exception e) {
					e.printStackTrace();
					continue;
				}

				String entriesJSON = NewWorldWikiBuilder.getGson().toJson(props);

				PGobject toc = new PGobject();
				toc.setType("json");
				toc.setValue(entriesJSON);

				PGobject json = new PGobject();
				json.setType("json");
				json.setValue("{\"js\":\"\",\"css\":\""+MINIFIED_CSS+"\"}");

				connection.delete("pages", "path=?", path);

				Page pageDAO = new Page(-1, path, DigestUtils.sha1Hex(path), item.getLocalName(), item.getLocalDescription(), false, true, null, "", "", html, html, toc, "html", Utils.getTimestamp(), Utils.getTimestamp(), "code", "en", 5, 5, json);

				int pageId = connection.insert("pages", pageDAO);

				String itemTypeName = item.getItemTypeDisplayName().replace("@", "");
				itemTypeName = WikiBuilder.localizationStrings.getOrDefault(itemTypeName, item.getItemType());

				if (pageId == -1) return;
				PageTag recipeTag = new PageTag(-1, pageId, 58);
				PageTag autoGeneratedTag = new PageTag(-1, pageId, 4);

				Tag tag = connection.selectClass("tags", "tag=?", Tag.class, itemTypeName.toLowerCase().replace(" ", "-"));
				int tagId;
				if (tag == null) {
					tag = new Tag(-1, itemTypeName.toLowerCase().replace(" ", "-"), itemTypeName.toLowerCase().replace(" ", "-"), Utils.getTimestamp(), Utils.getTimestamp());
					tagId = connection.insert("tags", tag);
				} else tagId = tag.getId();

				PageTag itemTypeTag = new PageTag(-1, pageId, tagId);

				connection.insert("pageTags", recipeTag);
				connection.insert("pageTags", autoGeneratedTag);
				connection.insert("pageTags", itemTypeTag);

				System.out.println("Built: recipe: "+item.getLocalName()+" Link: http://new-world.wiki/en/"+path);
				return;
			}

		} catch(Exception e) {
			e.printStackTrace();
		}

	}

	public static void loadCSSTemplate() {
		File file = new File("data/templates/recipes/style.css");

		try {
			BufferedReader reader = new BufferedReader(new FileReader(file));
			StringBuilder builder = new StringBuilder();
			String line;
			while((line = reader.readLine()) != null) builder.append(line);
			reader.close();

			CSS = builder.toString();

			Minifier minifier = Minifier.CSS;
			ByteArrayOutputStream out = new ByteArrayOutputStream();

			InputStream in = new ByteArrayInputStream(CSS.getBytes());
			minifier.minify(in, out, null, null);

			in.close();
			MINIFIED_CSS = new String(out.toByteArray());

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	public static List<Recipe> getUsedIn(String itemId) {
		List<Recipe> list = new ArrayList<>();
		for(Recipe recipe : recipes.values()) {
			for(int i = 0; i < recipe.getIngredients().length; i++)
				if(recipe.getIngredients()[i].equals(itemId))
					list.add(recipe);
		}
		return list;
	}

	public static List<Recipe> getObtainedFrom(String itemId) {
		List<Recipe> list = new ArrayList<>();
		for(Recipe recipe : recipes.values()) {
			if(recipe.getItemId().equals(itemId) || recipe.getRecipeId().equals(itemId))
				list.add(recipe);
		}
		return list;
	}

	@SuppressWarnings("unchecked")
	public static void loadRecipes() {

		recipes = new HashMap<>();
		try {
			BufferedReader reader = new BufferedReader(new FileReader(RECIPE_FILE));
			String line;
			StringBuilder builder = new StringBuilder();
			while((line = reader.readLine()) != null) builder.append(line);

			ArrayList<LinkedTreeMap<String, Object>> list = NewWorldWikiBuilder.getGson().fromJson(builder.toString(), ArrayList.class);
			for(LinkedTreeMap<String, Object> map : list) {

				String recipeId = (String) map.get("RecipeID");
				Recipe recipe = new Recipe(map);
				recipes.put(recipeId, recipe);

			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
}
