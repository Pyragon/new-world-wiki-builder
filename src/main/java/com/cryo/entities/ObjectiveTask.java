package com.cryo.entities;

import com.google.gson.internal.LinkedTreeMap;
import lombok.Data;

@Data
public class ObjectiveTask {

	private final String magicAffix;
	private final String overrideLocation;
	private final double targetThreshold;
	private final String isExactMatch;
	private final double targetQty;
	private final String killEnemyType;
	private final String uIScreenTag;
	private final String mapMarkerTitleLocTag;
	private final String useMagicAffix;
	private final String completedNotificationId;
	private final boolean useLargeItemDisplay;
	private final String communityGoalTag;
	private final String lootTag;
	private final double duration;
	private final boolean failOnCondition;
	private final String mapMarkerWorldDistanceThreshold;
	private final String craftingRecipeId;
	private final String typeAffix;
	private final String interactTag;
	private final String mapMarkerWorldPositionX;
	private final String mapMarkerWorldPositionY;
	private final String hideChildren;
	private final String itemDropVC;
	private final double chestDropProbability;
	private final String craftAnyRecipe;
	private final boolean enforceLocationRequirement;
	private final boolean tP_StayComplete;
	private final String subTask4;
	private final String subTask3;
	private final String useMatAffix;
	private final String subTask2;
	private final String subTask1;
	private final String taskBuySellType;
	private final String gridLayout;
	private final String subTask5;
	private final boolean stayActive;
	private final String itemName;
	private final String mapMarkerMapIcon;
	private final boolean triggerAnalyticsEvent;
	private final String matAffix;
	private final boolean awardOnlyOnce;
	private final double territoryID;
	private final boolean isHidden;
	private final String taskID;
	private final boolean pauseAndClearLootOnTaskComplete;
	private final String triggerAreaType;
	private final String useTypeAffix;
	private final boolean shouldCheckPoints;
	private final String mapMarkerDescriptionLocTag;
	private final String pOITag;
	private final String tP_DescriptionTag;
	private final String type;
	private final double itemDropProbability;
	private final double guranteedDropAttempts;
	private final String killEnemyWeaponID;
	private final String targetDescriptionTaskId;
	private final String isPurchaseOrEarn;
	private final String tP_TargetTag;

	public ObjectiveTask(LinkedTreeMap<String, Object> map) {
		magicAffix = (String) map.get("MagicAffix");
		overrideLocation = (String) map.get("OverrideLocation");
		Object o = map.get("TargetThreshold");
		targetThreshold = o instanceof Double ? (double) o : 0.0;
		isExactMatch = (String) map.get("IsExactMatch");
		o = map.get("TargetQty");
		targetQty = o instanceof Double ? (double) o : 0.0;
		killEnemyType = (String) map.get("KillEnemyType");
		uIScreenTag = (String) map.get("UIScreenTag");
		mapMarkerTitleLocTag = (String) map.get("MapMarkerTitleLocTag");
		useMagicAffix = (String) map.get("UseMagicAffix");
		completedNotificationId = (String) map.get("CompletedNotificationId");
		o = map.get("UseLargeItemDisplay");
		useLargeItemDisplay = o instanceof Double && (double) o == 1.0;
		communityGoalTag = (String) map.get("CommunityGoalTag");
		lootTag = (String) map.get("LootTag");
		o = map.get("Duration");
		duration = o instanceof Double ? (double) o : 0.0;
		o = map.get("FailOnCondition");
		failOnCondition = o instanceof Double && (double) o == 1.0;
		mapMarkerWorldDistanceThreshold = (String) map.get("MapMarkerWorldDistanceThreshold");
		craftingRecipeId = (String) map.get("CraftingRecipeId");
		typeAffix = (String) map.get("TypeAffix");
		interactTag = (String) map.get("InteractTag");
		mapMarkerWorldPositionX = (String) map.get("MapMarkerWorldPositionX");
		mapMarkerWorldPositionY = (String) map.get("MapMarkerWorldPositionY");
		hideChildren = (String) map.get("HideChildren");
		itemDropVC = (String) map.get("ItemDropVC");
		o = map.get("ChestDropProbability");
		chestDropProbability = o instanceof Double ? (double) o : 0.0;
		craftAnyRecipe = (String) map.get("CraftAnyRecipe");
		o = map.get("EnforceLocationRequirement");
		enforceLocationRequirement = o instanceof Boolean && (boolean) o;
		o = map.get("TP_StayComplete");
		tP_StayComplete = o instanceof Double && (double) o == 1.0;
		subTask4 = (String) map.get("SubTask4");
		subTask3 = (String) map.get("SubTask3");
		useMatAffix = (String) map.get("UseMatAffix");
		subTask2 = (String) map.get("SubTask2");
		subTask1 = (String) map.get("SubTask1");
		taskBuySellType = (String) map.get("TaskBuySellType");
		gridLayout = (String) map.get("GridLayout");
		subTask5 = (String) map.get("SubTask5");
		o = map.get("StayActive");
		stayActive = o instanceof Double && (double) o == 1.0;
		itemName = (String) map.get("ItemName");
		mapMarkerMapIcon = (String) map.get("MapMarkerMapIcon");
		o = map.get("TriggerAnalyticsEvent");
		triggerAnalyticsEvent = o instanceof Boolean && (boolean) o;
		matAffix = (String) map.get("MatAffix");
		o = map.get("AwardOnlyOnce");
		awardOnlyOnce = o instanceof Boolean && (boolean) o;
		o = map.get("TerritoryID");
		territoryID = o instanceof Double ? (double) o : 0.0;
		o = map.get("IsHidden");
		isHidden = o instanceof Double && (double) o == 1.0;
		taskID = (String) map.get("TaskID");
		o = map.get("PauseAndClearLootOnTaskComplete");
		pauseAndClearLootOnTaskComplete = o instanceof Boolean && (boolean) o;
		triggerAreaType = (String) map.get("TriggerAreaType");
		useTypeAffix = (String) map.get("UseTypeAffix");
		o = map.get("ShouldCheckPoints");
		shouldCheckPoints = o instanceof Boolean && (boolean) o;
		mapMarkerDescriptionLocTag = (String) map.get("MapMarkerDescriptionLocTag");
		pOITag = (String) map.get("POITag");
		tP_DescriptionTag = (String) map.get("TP_DescriptionTag");
		type = (String) map.get("Type");
		o = map.get("ItemDropProbability");
		itemDropProbability = o instanceof Double ? (double) o : 0.0;
		o = map.get("GuranteedDropAttempts");
		guranteedDropAttempts = o instanceof Double ? (double) o : 0.0;
		killEnemyWeaponID = (String) map.get("KillEnemyWeaponID");
		targetDescriptionTaskId = (String) map.get("TargetDescriptionTaskId");
		isPurchaseOrEarn = (String) map.get("IsPurchaseOrEarn");
		tP_TargetTag = (String) map.get("TP_TargetTag");
	}
}
